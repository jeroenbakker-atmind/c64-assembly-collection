use c64_assembler::{
    builder::{ApplicationBuilder, InstructionBuilder, ModuleBuilder},
    generator::{print_hexdump, DasmGenerator, Generator, ProgramGenerator},
    validator::{AssemblerResult, Validator},
};
use c64_encoder::command::modules::EngineBuilder;

pub fn engine_application() -> AssemblerResult<Vec<u8>> {
    let data = vec![
        0x01, 0x00, 0x02, 0x00, 0x11, 0x27, 0x00, 0x00, 0x20, 0xA5, 0x21, 0x84, 0xA0, 0x05, 0x00, 0xC4, 0x84, 0x80,
        0xA0, 0xA0, 0x00, 0xA5, 0x80, 0xE5, 0xA4, 0xA0, 0xA5, 0xA4, 0x00, 0xF5, 0xB5, 0xFF, 0xFF, 0xA4, 0xA5, 0xB5,
        0xB5, 0xED, 0x84, 0xA0, 0x21, 0xFF, 0xB5, 0x80, 0x00, 0xA4, 0xA1, 0xA0, 0xA1, 0xA0, 0xB1, 0xE5, 0x00, 0x84,
        0x00, 0x80, 0x20, 0xA0, 0x20, 0x00, 0x00, 0xA0, 0xA0, 0x80, 0x80, 0xA4, 0x20, 0xF5, 0xF7, 0xA5, 0xA1, 0xFD,
        0xFF, 0xE5, 0xA5, 0xA4, 0xA0, 0x00, 0x80, 0xA5, 0xA5, 0xE4, 0xA5, 0x20, 0x00, 0x01, 0x12, 0x22, 0x8B, 0x3F,
        0x1A, 0x3F, 0x1A, 0x3F, 0x1A, 0x02, 0x1A, 0x43, 0x26, 0x0A, 0x03, 0x23, 0x1A, 0x81, 0xC2, 0x18, 0x44, 0x13,
        0x1F, 0x21, 0x16, 0x18, 0x1A, 0x87, 0x41, 0x1A, 0x82, 0x47, 0x18, 0x10, 0x25, 0x1F, 0x0B, 0x11, 0x0F, 0x10,
        0x1A, 0x8D, 0x02, 0x1A, 0x83, 0x44, 0x18, 0x1B, 0x14, 0x0E, 0x02, 0x0C, 0x41, 0x04, 0x07, 0x1A, 0x95, 0x04,
        0x1A, 0x81, 0x02, 0x18, 0xC1, 0x19, 0x42, 0x15, 0x1E, 0xC2, 0x20, 0x02, 0x1A, 0x9A, 0x05, 0x1A, 0x81, 0x02,
        0x18, 0x46, 0x1B, 0x14, 0x1F, 0x24, 0x1C, 0x1A, 0x9E, 0x02, 0x1A, 0x81, 0x02, 0x18, 0x45, 0x1B, 0x14, 0x13,
        0x1C, 0x1A, 0xA2, 0x02, 0x18, 0xC1, 0x19, 0xC1, 0x1B, 0xC1, 0x1C, 0x41, 0x1A, 0x9A, 0x41, 0x1A, 0x88, 0x02,
        0x18, 0xC1, 0x19, 0x41, 0x23, 0x91, 0x41, 0x18, 0x81, 0x02, 0x18, 0x82, 0x02, 0x18, 0x82, 0x41, 0x1A, 0x89,
        0x02, 0x18, 0x41, 0x1A, 0x88, 0x03, 0x18, 0x91, 0x41, 0x1A, 0x81, 0x02, 0x18, 0x03, 0x19, 0x82, 0x42, 0x18,
        0x1A, 0x86, 0x05, 0x18, 0x83, 0x41, 0x18, 0x8D, 0x02, 0x1A, 0x41, 0x00, 0x02, 0x18, 0x05, 0x19, 0xC1, 0x1A,
        0x85, 0x09, 0x18, 0x81, 0x41, 0x18, 0x8D, 0x03, 0x1A, 0x02, 0x00, 0xC2, 0x18, 0x46, 0x18, 0x00, 0x1A, 0x01,
        0x07, 0x17, 0x82, 0x0D, 0x18, 0x81, 0x41, 0x18, 0x92, 0x42, 0x06, 0x01, 0x02, 0x1F, 0x41, 0x08, 0x82, 0x1A,
        0x18, 0xC1, 0x19, 0x41, 0x06, 0x03, 0x19, 0x02, 0x1D, 0x03, 0x1F, 0x43, 0x24, 0x21, 0x02, 0x81, 0x0D, 0x18,
        0x0D, 0x19, 0x02, 0x1D, 0x02, 0x22, 0x03, 0x1F, 0x04, 0x24, 0x42, 0x0D, 0x05, 0x82, 0x0A, 0x18, 0x0A, 0x19,
        0x04, 0x1B, 0x03, 0x22, 0x04, 0x13, 0x03, 0x1F, 0x43, 0x0D, 0x09, 0x05, 0x86, 0x07, 0x18, 0x09, 0x19, 0x06,
        0x1B, 0x03, 0x22, 0x04, 0x13, 0xC1, 0x14, 0x42, 0x1B, 0x05, 0x8B, 0x06, 0x18, 0x08, 0x19, 0x0A, 0x1B, 0x02,
        0x05, 0x41, 0x18, 0x93, 0x0F, 0x18,
    ];
    let engine_data = ModuleBuilder::default()
        .name("engine_data")
        .instructions(InstructionBuilder::default().label("engine_data").raw(&data).build())
        .build();

    let application = ApplicationBuilder::default()
        .name("Engine")
        .include_vic2_defines()
        .module(
            ModuleBuilder::default()
                .name("main")
                .instructions(
                    InstructionBuilder::default()
                        .add_basic_header()
                        .label("main_entry_point")
                        .jsr_addr("engine__init")
                        .jsr_addr("engine__frame__process")
                        .rts()
                        .build(),
                )
                .build(),
        )
        .add_engine()
        .module(engine_data)
        .build()
        .unwrap();

    application.validate()?;

    println!("{}", DasmGenerator::default().generate(application.clone()).unwrap());
    let result = ProgramGenerator::default().generate(application).unwrap();
    print_hexdump(&result);
    Ok(result)
}
